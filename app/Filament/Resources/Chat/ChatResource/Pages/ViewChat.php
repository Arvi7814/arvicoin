<?php

namespace App\Filament\Resources\Chat\ChatResource\Pages;

use App\Enum\OrderStatusEnum;
use App\Filament\Resources\Chat\ChatResource;
use App\Http\Services\Chat\Message;
use App\Http\Services\Chat\MessageService;
use App\Jobs\Chat\DeleteUnreadMessagesJob;
use App\Models\Chat\Chat;
use App\Models\Order\Order;
use App\Models\TemplateMessage;
use Auth;
use Filament\Resources\Pages\ViewRecord;
use Illuminate\Database\Eloquent\Model;
use Livewire\WithFileUploads;


/**
 * @property-read Chat $record
 */
class ViewChat extends ViewRecord
{
    use WithFileUploads;

    protected static string $resource = ChatResource::class;

    protected static string $view = 'filament.resources.chat.chat-resource.pages.view-page';
    public bool $hideInfo = true;

    protected function getActions(): array
    {
        return parent::getActions(); // TODO: Change the autogenerated stub
    }

    public string $message = '';
    public $media = null;

    protected function resolveRecord($key): Model
    {
        return Chat::query()
            ->where('id', $key)
            ->first();
    }

    public function updated($name, $value)
    {
        if ($name === 'media' && !empty($value)) {
            $this->submit();
        }
    }

    protected function getViewData(): array
    {
        DeleteUnreadMessagesJob::dispatch($this->record->id, \Illuminate\Support\Facades\Auth::id());

        $messages = $this->record->messages()
            ->with(['user'])
            ->withTrashed()
            ->get();

        return array_merge(
            parent::getViewData(),
            [
                'messages' => $messages,
                'templates' => TemplateMessage::query()
                    ->orderBy('number')
                    ->get(),
                'orders' => Order::query()
                    ->whereStatus(OrderStatusEnum::ACCEPTED)
                    ->where('operator_id', \Illuminate\Support\Facades\Auth::id())
                    ->whereNot('id', $this->record->order_id)
                    ->get()
            ]
        );
    }

    protected function getListeners(): array
    {
        $id = \Illuminate\Support\Facades\Auth::id();

        return [
            "echo:chats.{$this->record->id},.message.sent" => '$refresh',
            "echo:chats.{$this->record->id},.messages.deleted" => '$refresh',
            "echo:users.$id,.message.sent" => '$refresh',
        ];
    }

    public function submit(): void
    {
        $service = new MessageService();
        $service->newMessage(
            new Message(
                $this->message,
                empty($this->media)
                    ? null
                    : (is_array($this->media) ? $this->media[0] : $this->media)
            ),
            $this->record,
            Auth::user()
        );

        $this->message = '';
        $this->media = null;
    }

    public function sendTemplate(string $message): void
    {
        $this->message = $message;
        $this->submit();
    }

    public function toggleInfo(): void
    {
        $this->hideInfo = !$this->hideInfo;
    }

    public function deleteMessage(int $messageId): void
    {
        $service = new MessageService();
        $service->deleteMessages($this->record, [$messageId]);

        $this->emit('$refresh');
    }
}
